"""
Model definitions to representation the activitystreams for multiple sites.
"""

import datetime

from django.db import models
from django.db.models.query import Q
from django.template import Template, Context

from activitystreams.utils import PickleField

class Source(models.Model):
    """ The site Source allows us to attach other objects to specific sites. """
    #::
    name = models.CharField(max_length=100, unique=True)
    #:: Slug is auto-populated in Django Admin and used in calls to API
    slug = models.SlugField(max_length=50, unique=True)

    def __unicode__(self):
        return self.name

class Action(models.Model):
    """ Actions are base objects to which ``Activity`` objects attach. """
    #::
    source = models.ForeignKey(Source, related_name='actions')
    #::
    slug = models.SlugField(unique=False)
    #:: Templates should be in Django template format and may reference any keys stored in the Activity record's ``context`` pickle.
    template = models.TextField()

    def __unicode__(self):
        return u'%s: %s' % (self.source, self.slug)

    class Meta:
        unique_together = (('source', 'slug'),)

class ActivityObject(models.Model):
    """ ActivityObject objects are used as direct and indirect objects in individual Activity records. """
    #::
    source = models.ForeignKey(Source, related_name='activity_objects')
    #:: Content types and their IDs are managed by consumer applications. These are kept 'namespaced' (sort of) via the source attribute.
    content_type_id = models.PositiveIntegerField(null=True, blank=True)
    #::
    object_id = models.PositiveIntegerField(null=True, blank=True)

    def __unicode__(self):
        return '%s:%s:%s' % (self.source, self.content_type_id, self.object_id)

    class Meta:
        unique_together = (('source', 'content_type_id', 'object_id'),)

class UserObject(models.Model):
    """ UserObject tracks individual users in the system, regardless of source application. """
    #:: user_ids must be unique across all sources. However, ``source`` is not an attribute here so that sites may share users in an uninhibited way. It is up to consumer applications to determine how they prefer to use these objects and label their users.
    user_id = models.CharField(max_length=100, unique=True)

    def __unicode__(self):
        return u'%s' % self.user_id

class Activity(models.Model):
    """ Activity objects are the primary method by which events are recorded."""
    #::
    action = models.ForeignKey(Action, related_name='activities')
    #::
    user = models.ForeignKey(UserObject, null=True, blank=True, related_name='activities')
    #::
    direct_object = models.ForeignKey(ActivityObject, null=True, blank=True, related_name='direct_activities')
    #::
    indirect_object = models.ForeignKey(ActivityObject, null=True, blank=True, related_name='indirect_activities')
    #::
    timestamp = models.DateTimeField(default=datetime.datetime.now)
    #:: Context is a pickled Python datastructure (usually a dictionary) that is made available as context to the Action template upon rendering.
    context = PickleField(blank=True, null=True)
    #:: Content is generated by rendering the Activity data against the Action template.

    content = models.TextField(blank=True)

    def save(self):
        template_context = self.context and self.context or {}
        self.content = Template(self.action.template).render(Context(template_context))
        super(Activity, self).save()

    def __unicode__(self):
        return '%s:%s:%s' % (self.action, self.user_id, self.id)

class Interest(models.Model):
    """ Interests allow a notion of 'following' for users and objects. """
    #::
    activity_object = models.ForeignKey(ActivityObject, related_name='interests')
    #::
    user = models.ForeignKey(UserObject, related_name='interests')

    class Meta:
        unique_together = (('activity_object', 'user'),)
